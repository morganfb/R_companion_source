diag.test.ppv = num.true.pos/num.pos.test
diag.test.ppv
addmargins(table(disease.presence,diag.test.outcome))
barplot(table(disease.presence))
num.patients = 25
population.response.prob = 0.15
set.seed(6578)
replicates = 1000
num.responses.replicate = vector("numeric", replicates)
set.seed(2104)
for (i in 1:replicates){
x = sample(c(0,1), size = num.patients, replace = TRUE,
prob = c(1 - population.response.prob,
population.response.prob))
num.responses.replicate[i] = sum(x)
}
response.dist = table(num.responses.replicate)
as.matrix(response.dist)
barplot(response.dist)
mean(num.responses.replicate)
sd(num.responses.replicate)
100000 - 350
100000 * .0035
350 * 0.89
350 * 0.11
99650*0.07
99650*0.93
6975.5 + 311.5
38.5 + 99674
38.5 + 99674.0
38 + 99674.0
breast.ca.prevalence = 0.0035
mammogram.sens = 0.89
mammogram.spec = 0.93
pop.size = 100000
## expected number of healthy children and childre with
##   the disorder
expected.cases = pop.size * breast.ca.prevalence
expected.noncases = pop.size - expected.cases
##  Number of children testing positive will consist
##     of both true and false positives
expected.true.pos.tests = expected.cases * mammogram.sens
expected.false.pos.tests = expected.noncases * (1 - mammogram.spec)
##  now calculate expected number of positive tests
##      in population
expected.pos.tests = expected.true.pos.tests + expected.false.pos.tests
## Among all positive tests, calculate the fraction of positive tests
##    correctly identifying trisomy 21
mammogram.ppv = expected.true.pos.tests /expected.pos.tests
mammogram.ppv
expected.pos.tests
expected.true.pos.tests
expected.false.pos.tests
99650 * 0.93
expected.false.pos.tests
expected.true.neg.tests = expected.non.cases * mammogram.spec
expected.true.neg.tests = expected.noncases * mammogram.spec
expected.false.neg.tests = expected.noncases * (1 - mammogram.spec)
expected.neg.tests = expected.true.neg.tests + expected.false.neg.tests
expected.true.neg.tests
expected.false.neg.tests
expected.neg.tests
expected.false.neg.tests
expected.false.neg.tests
expected.false.neg.tests = expected.cases * (1 - mammogram.spec)
expected.false.neg.tests
350*0.11
breast.ca.prevalence = 0.0035
mammogram.sens = 0.89
mammogram.spec = 0.93
pop.size = 100000
## expected number of women with and without
##   breast cancer
expected.cases = pop.size * breast.ca.prevalence
expected.noncases = pop.size - expected.cases
##  Number of women testing positive will consist
##     of both true and false positives
expected.true.pos.tests = expected.cases * mammogram.sens
expected.false.pos.tests = expected.noncases * (1 - mammogram.spec)
##  now calculate expected number of positive tests
##      in population
expected.pos.tests = expected.true.pos.tests + expected.false.pos.tests
expected.true.pos.tests
expected.false.pos.tests
expected.pos.tests
## Among all positive tests, calculate the fraction of positive tests
##    correctly identifying breast cancer
mammogram.ppv = expected.true.pos.tests /expected.pos.tests
mammogram.ppv
# calculate negative predictive value
expected.true.neg.tests = expected.noncases * mammogram.spec
expected.true.neg.tests = expected.noncases * mammogram.spec
expected.false.neg.tests = expected.cases * (1 - mammogram.sens)
expected.neg.tests = expected.true.neg.tests + expected.false.neg.tests
expected.true.neg.tests
expected.false.neg.tests
expected.neg.tests
99650 * 0.93
expected.true.neg.tests = expected.noncases * mammogram.spec
expected.neg.tests
help(pbinom)
pbinom(30,200,0.12)
(1/36)*(1/36)
(0.01)(0.05)
(0.01)*(0.05)
0.95^50
```{r}
0.043/0.093
198/10000
##  coding for the mammogram problem
##  begin with one set of women
##  set parameters and initialize
prob.false.positive = 0.05
num.women = 50
set.seed(2401)
## initialize population
## default for function vector() sets values to 0
## This call to vector() creates a numeric vector
##    of length num.women, with all values = 0
test.result = vector("numeric", num.women)
## now sample from test results
##    using function sample()
## Type help(sample) for a complete explanation of
##    the function
##  0 = neg result, 1 = post result
test.result = sample(c(0,1), size = num.women,
prob=c(1 - prob.false.positive, prob.false.positive),
replace = TRUE)
View(as.matrix(test.result))
prob.false.positive = 0.05
num.women = 50
num.replicates = 5000
set.seed(2401)
## initialize for replicates
at.least.one.pos = vector("numeric", num.replicates)
# Nest earlier simulation in a `for' loop which
##    repeats the 50 mammograms num.replicates times
#  Record in each for() loop whether or not at least one
##    test was positive
for(ii in 1:num.replicates){
test.result = vector("numeric", num.women)
test.result = sample(c(0,1), size = num.women,
prob=c(1 - prob.false.positive, prob.false.positive),
replace = TRUE)
num.pos.tests = sum(test.result)
## at least one positive test?
at.least.one.pos[ii] = (num.pos.tests > 0)
}
## Now calculate the proportion of replicates that produced
##   at least one positive test
sum(at.least.one.pos)/num.replicates
1/800
799/800
0.980 * 0.00125
(799/800)* 0.005
tri21.prevalence = 1/800
cfdna.sens = 0.980
cfdna.spec = 0.995
pop.size = 10000
## expected number of healthy children and children with
##   the disorder
expected.cases = pop.size * tri21.prevalence
expected.cases
expected.noncases = pop.size - expected.cases
expected.noncases
expected.true.pos.tests = expected.cases * cfdna.sens
expected.true.pos.tests
expected.false.pos.tests = expected.noncases * (1 - cfdna.spec)
expected.false.pos.tests
expected.pos.tests = expected.true.pos.tests + expected.false.pos.tests
expected.pos.tests
## Among all positive tests, calculate the fraction of positive tests
##    correctly identifying trisomy 21
cfdna.ppv = expected.true.pos.tests /expected.pos.tests
cfdna.ppv
## parameters of the problem
tri21.prevalence = 1/400
cfdna.sens = 0.980
cfdna.spec = 0.995
pop.size = 10000
## expected number of healthy children and children with
##   the disorder
expected.cases = pop.size * tri21.prevalence
expected.cases
expected.noncases = pop.size - expected.cases
expected.noncases
##  Number of children testing positive will consist
##     of both true and false positives
expected.true.pos.tests = expected.cases * cfdna.sens
expected.true.pos.tests
expected.false.pos.tests = expected.noncases * (1 - cfdna.spec)
expected.false.pos.tests
##  now calculate expected number of positive tests
##      in population
expected.pos.tests = expected.true.pos.tests + expected.false.pos.tests
expected.pos.tests
## Among all positive tests, calculate the fraction of positive tests
##    correctly identifying trisomy 21
cfdna.ppv = expected.true.pos.tests /expected.pos.tests
cfdna.ppv
num.patients = 20
population.response.prob = 0.20
set.seed(1204)
replicates = 10000
num.responses.replicate = vector("numeric", replicates)
for (i in 1:replicates){
x = sample(c(0,1), size = num.patients, replace = TRUE,
prob = c(1 - population.response.prob, population.response.prob))
num.responses.replicate[i] = sum(x)
}
response.dist = table(num.responses.replicate)
as.matrix(response.dist)
barplot(response.dist)
mean(num.responses.replicate)
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/nhanes.samp.Rdata")
View(nhanes.samp)
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/nhanes.samp.adult.Rdata")
1236/100000
3023/100000
792/100000
# R code to create graph of a complicated distribution
# Referred to on slide 62, Unit 2
num.patients = 20
population.response.prob = 0.20
set.seed(1204)
replicates = 10000
num.responses.replicate = vector("numeric", replicates)
for (i in 1:replicates){
x = sample(c(0,1), size = num.patients, replace = TRUE,
prob = c(1 - population.response.prob,
population.response.prob))
num.responses.replicate[i] = sum(x)
}
response.dist = table(num.responses.replicate)
as.matrix(response.dist)
barplot(response.dist)
as.matrix(response.dist)
barplot(response.dist)
mean(num.responses.replicate)
prop.responses.replicate = num.responses.replicate/replicates
prop.responses.replicate = num.responses.replicate/replicates
response.dist.prob = table(prop.responses.replicate)
as.matrix(response.dist.prop)
prop.responses.replicate = num.responses.replicate/replicates
response.dist.prop = table(prop.responses.replicate)
as.matrix(response.dist.prop)
prop.responses.replicate = num.responses.replicate/replicates
as.matrix(response.dist)
response.dist = table(num.responses.replicate)
response.dist
barplot(response.dist)
num.patients = 20
population.response.prob = 0.20
set.seed(1204)
replicates = 10000
num.responses.replicate = vector("numeric", replicates)
for (i in 1:replicates){
x = sample(c(0,1), size = num.patients, replace = TRUE,
prob = c(1 - population.response.prob,
population.response.prob))
num.responses.replicate[i] = sum(x)
}
# R code to create graph of a complicated distribution
# Referred to on slide 62, Unit 2
num.patients = 20
population.response.prob = 0.20
set.seed(1204)
replicates = 10000
num.responses.replicate = vector("numeric", replicates)
for (i in 1:replicates){
x = sample(c(0,1), size = num.patients, replace = TRUE,
prob = c(1 - population.response.prob,
population.response.prob))
num.responses.replicate[i] = sum(x)
}
response.dist = table(num.responses.replicate)
as.matrix(response.dist)
response.dist #new line in the code
barplot(response.dist)
mean(num.responses.replicate)
num.patients = 20
population.response.prob = 0.80
set.seed(1204)
replicates = 10000
num.responses.replicate = vector("numeric", replicates)
for (i in 1:replicates){
x = sample(c(0,1), size = num.patients, replace = TRUE,
prob = c(1 - population.response.prob,
population.response.prob))
num.responses.replicate[i] = sum(x)
}
response.dist = table(num.responses.replicate)
as.matrix(response.dist)
response.dist #new line in the code
barplot(response.dist)
-2/3.5
pnorm(20/12) - pnorm(-10/12)
pnorm(20/12) - pnorm(10/12)
help(pnorm)
pnorm(100, mean=80, sd = 12) - pnorm(90, mean=80, sd = 12)
qnorm(0.05)
qnorm(0.95)
(12)*(-1.645) + 80
(12)*(1.645 + 80)
(12)*(1.645) + 80
qnorm(0.05, mean=80, sd = 12)
qnorm(0.95, mean=80, sd = 12)
1 - pnorm(-0.93)
1 - pnorm(21, mean = 26.6, sd = 5.8)
qnorm(0.975,mean = 26.4, sd = 5.8)
load("~/Dropbox/working_files/teaching/stat102/spring_2016/exams/midterm_exam/microbiomeData/midterm.RData")
View(cancer.bugs)
hist(cancer.bugs$bug1)
hist(cancer.bugs$bug2)
hist(cancer.bugs$log(bug1)
hist(log(cancer.bugs$bug1))
hist(log(cancer.bugs$bug1))
hist(log(cancer.bugs$bug2))
hist(sqrt(cancer.bugs$bug2))
bug.only.data = cancer.bugs[,-(1:22)]
View(bug.only.data)
hist(log(bug.only.data$bug2)/(1 -log(bug.only.data$bug2)))
transform.1.bug2 = (bug.only.data$bug2) / (1 - bug.only.data)
hist(transform.1.bug2)
transform.1.bug2 = (bug.only.data$bug2) / (1 - bug.only.data$bug2)
hist(transform.1.bug2)
hist(log(transform.1.bug2))
hist(log(transform.1.bug2))
hist(transform.1.bug2)
hist(log(transform.1.bug2))
function (x, ...)
library("TeachingDemos", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
vis.binom()
library(TeachingDemos)
choose(10,6)
dbinom(6, 10, 0.3)
help("dbinom")
dbinom(x = 6, size = 10, prob = 0.3)
1 - dbinom(x= 30, size = 200, prob = 0.12)
1 - pbinom(x= 30, size = 200, prob = 0.12)
1 - pbinom(30, size = 200, prob = 0.12)
pbinom(31, size = 200, prob = 0.12, lower.tail = FALSE)
pbinom(30, size = 200, prob = 0.12, lower.tail = FALSE)
1 - pbinom(30, size = 200, prob = 0.12)
pbinom(31, size = 200, prob = 0.12, lower.tail = FALSE)
pbinom(30, size = 200, prob = 0.12, lower.tail = FALSE)
dbinom(x = 6, size = 10, prob = 0.3)
vis.binom()
vis.binom()
num.patients = 20
population.response.prob = 0.80
set.seed(1204)
replicates = 10000
num.responses.replicate = vector("numeric", replicates)
for (i in 1:replicates){
x = sample(c(0,1), size = num.patients, replace = TRUE,
prob = c(1 - population.response.prob,
population.response.prob))
num.responses.replicate[i] = sum(x)
}
response.dist = table(num.responses.replicate)
#  as.matrix(response.dist)
response.dist #new line in the code
barplot(response.dist)
load("~/Dropbox/working_files/teaching/stat102/spring_2016/exams/midterm_exam/exam/pheno_abundance.Rdata")
plot(pheno.abundance$bug19, pheno.abundance$bug20)
plot(pheno.abundance$bug1, pheno.abundance$bug2)
plot(log(pheno.abundance$bug1), log(pheno.abundance$bug2))
plot(log(pheno.abundance$bug19), log(pheno.abundance$bug20))
boxplot(pheno.abundance$Age ~ pheno.abundance$Stage)
library(TeachingDemos)
vis.binom()
incidence.rate = 30/1000000
city.population.size = 75000
num.city.age.le.14 = city.population.size * 0.20
annual.city.rate = num.city.age.le.14 * incidence.rate
five.year.city.rate = 5*annual.city.rate
five.year.city.rate
prob.8.cases = dpois(8, lambda = five.year.city.rate)
prob.8.cases
incidence.rate.per.child = 30/1000000
city.population.size = 75000
num.city.age.le.14 = city.population.size * 0.20
annual.city.rate = num.city.age.le.14 * incidence.rate.per.child
five.year.city.rate = 5*annual.city.rate
five.year.city.rate
prob.8.cases = dpois(8, lambda = five.year.city.rate)
prob.8.cases
prob.8.or.more.cases = 1 - ppois(7, lambda = five.year.city.rate)
prob.8.or.more.cases
incidence.rate.per.child = 30/1000000
city.population.size = 75000
num.city.age.le.14 = city.population.size * 0.20
annual.city.rate = num.city.age.le.14 * incidence.rate.per.child
five.year.city.rate = 5*annual.city.rate
five.year.city.rate
prob.8.cases = dpois(8, lambda = five.year.city.rate)
prob.8.cases
prob.8.or.more.cases = 1 - ppois(7, lambda = five.year.city.rate)
prob.8.or.more.cases
help(pt)
hes.pub.den = 3416
hes.rev.den = 3871
hes.pub.rand = 3358
hes.pre.rand.saline = 509
hes.rev.den.calc = hes.pub.rand + hes.pre.rand.saline
3336 - 509
hes.pub.den = 3416
hes.rev.den = 3871
hes.pub.rand = 3358
hes.pre.rand.saline = 508
hes.rev.den.calc = hes.pub.rand + hes.pre.rand.saline
hes.rev.den.calc = hes.pub.rand + hes.pre.rand.saline
hes.rev.den.calc
3336 - 508
3416 + 3468
load("nhanes.samp.adult.Rdata")
View(nhanes.samp.adult)
names(nhanes.samp.adult)
mean(nhanes.samp.adult$BMI)
mean(nhanes.samp.adult$BMI, na.rm = TRUE)
nhanes.comp.samp.aduts = complete.cases(nhanes.samp.adult)
sum(is.na(nhanes.samp.adult$BMI))
nrow(nhanes.samp.adult)
mean(nhanes.samp.adult$BMI, na.rm = TRUE)
sd(nhanes.samp.adult$BMI, na.rm = TRUE)
sum(is.na(nhanes.samp.adult$BMI))
nrow(nhanes.samp.adult)
sample.size = num.cases - num.missing
num.cases = nrow(nhanes.samp.adult)
sample.size = num.cases - num.missing
num.missing = sum(is.na(nhanes.samp.adult$BMI))
num.cases = nrow(nhanes.samp.adult)
sample.size = num.cases - num.missing
sample.size
load("nhanes.samp.adult.Rdata")
hist(nhanes.samp.adult$BMI)
help("hist")
hist(nhanes.samp.adult$BMI, breaks = 20)
a = nhanes.samp.adult$BMI < 80
help("t.test")
t.test(nhanes.samp.adult$BMI, alternative = "greater", mu = 21.7, conf.level = 0.95)
t.test(nhanes.samp.adult$BMI[a], alternative = "greater", mu = 21.7, conf.level = 0.95)
load("nhanes.samp.adult.Rdata")
mean(nhanes.samp.adult$BMI)
mean(nhanes.samp.adult$BMI, na.rm = TRUE)
sd(nhanes.samp.adult$BMI, na.rm = TRUE)
num.missing = sum(is.na(nhanes.samp.adult$BMI))
num.missing = sum(is.na(nhanes.samp.adult$BMI))
num.missing
num.cases = nrow(nhanes.samp.adult)
num.cases
sample.size = num.cases - num.missing
sample.size
load("nhanes.samp.adult.Rdata")
mean(nhanes.samp.adult$BMI)
mean(nhanes.samp.adult$BMI, na.rm = TRUE)
sd(nhanes.samp.adult$BMI, na.rm = TRUE)
num.missing = sum(is.na(nhanes.samp.adult$BMI))
num.missing
num.cases = nrow(nhanes.samp.adult)
num.cases
sample.size = num.cases - num.missing
sample.size
x.bar = mean(nhanes.samp.adult$BMI, na.rm = TRUE)
x.bar
x.sd = sd(nhanes.samp.adult$BMI, na.rm = TRUE)
x.sd
num.missing = sum(is.na(nhanes.samp.adult$BMI))
num.missing
num.cases = nrow(nhanes.samp.adult)
num.cases
sample.size = num.cases - num.missing
sample.size
null.pop.mean = 21.7
t.stat = (x.bar - null.pop.mean)/(x.sd/sqrt(sample.size))
null.pop.mean = 21.7
t.stat = (x.bar - null.pop.mean)/(x.sd/sqrt(sample.size))
t.stat
t.test(nhanes.samp.adult$BMI, alternative = "greater", mu = 21.7, conf.level = 0.95)
3347 + 508
3372 - 508
3384 - 508
3358 + 508
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/toddlers.Rdata")
View(toddlers)
load("~/Dropbox/working_files/teaching/stat102/spring_2016/R_code/nhanes.samp.adult.Rdata")
View(nhanes.samp.adult)
help("cor")
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/nhanes.samp.adult.Rdata")
View(nhanes.samp.adult)
7.05 + (0.049)*(6) - (0.007)*(27) + (1.50)*(1)
18.5/23
18.5/25
17/23
load("/Users/dph/Dropbox/working_files/teaching/lecture_datasets/stat102_data/ed.latino.Rdata")
View(ed.latino)
300/180000
300/180000000
63/40000000
load("~/Dropbox/working_files/teaching/stat102/spring_2016/exams/final_exam/potential_final_problems/arenosa_rnaseq/arenosa_rnaseq.Rdata")
View(arenosa.rnaseq)
-1.66 + 0.018*32
exp(-1.66 + 0.018*32)
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/uis/uis.Rdata")
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/famuss_09aug2015.Rdata")
View(famuss)
19.3/21.1
load("~/Dropbox/working_files/teaching/stat102/spring_2016/admin/final_scores.Rdata")
View(final.scores)
32 + 40 + 32 + 27 + 33
setwd("~/Dropbox/working_files/open_intro/oi_biostat/r_supplement/chapters/Chapter1")
