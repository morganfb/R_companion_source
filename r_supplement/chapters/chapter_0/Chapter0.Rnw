\pagestyle{fancy}

This text is a companion to \textit{Introductory Statistics for the Life and Biomedical Sciences}; while the main text focuses on a conceputal introduction to the use of statistics in the life sciences, this supplement provides an analytical and computational introduction using the statistical computing language \textsf{R}.  An understanding of the basics of \textsf{R}, how it stores, utilizes, and processes data, and how to analyze these results will be built.  

\section{What is \textsf{R}?}
\textsf{R} is an open-source statistical software that allows users to import, transform, and analyze data in order to draw conclusions.  In this case, it will be used to perform analyses of biomedical data, and this text will go through the steps to do so from installation to drawing conclusions.  

\subsection{Installation of \textsf{R}}
\textsf{R} is freely available on the internet, and it is recommended to download it from \url{http://cran.us.r-project.org/}, where there are up to date versions for Windows, Mac OS X, and Linux.  This link will provide instructions for a complete download.  

\subsection{Introduction to RStudio}
\textsf{RStudio} is a platform that makes using \textsf{R} significantly easier, providing a visual framework for working. It can be downloaded from \url{https://www.rstudio.com/products/rstudio/download/}, by scrolling to the bottom and selecting the appropriate operating system from \textit{Installers} under \textit{Installers for Supported Platforms}.  \textsf{RStudio} is not necessary in order to use \textsf{R}, but it is highly recommended for organizational and accesibility reasons.      


Upon opening \textsf{RStudio}, something similar to Figure \ref{fig:rstudio} should appear.  The four pane window environment is standard and provides easy access to many of the most commonly utilized tools.  Note that the four panes can be moved around or closed, so different versions of \textsf{Rstudio} may look a bit different.  
\begin{figure}[h!]
\centering
\includegraphics[width = 6in]{chapters/chapter_0/rstudio.png}
\caption{The default \textsf{RStudio} layout.  }
\label{fig:rstudio}
\end{figure}

\subsubsection{The Script Editor}
The top left pane in Figure \ref{fig:rstudio} shows the script editor, used to edit a \textsf{R} script file.  Think of this pane as similar to any text editor, providing a working space for the code being utilized and a means to save that for later.  We recommend that all work is done in a \textsf{R} script file so no information is lost.  If a script editor is not visible, a new \textsf{R} script file can be created by going to \textit{File > New File > R Script}.  

In order to run a command in the script editor, you must place your curser on the line you want to run and type \textsf{command + Return} on Mac or \textsf{Ctrl + Enter} on Windows or Linux.  Alternatively, at the top of the script editor pane is the run button, which can be clicked after highlighting the code to be run.  Try this for yourself with the following example, and if successful, you shall see "hi" print out in the bottom left pane.  

<<>>=
print("hi!")
@


\subsubsection{The Console} 
The bottom left pane in Figure \ref{fig:rstudio} is called the console.  This is the machinery in \textsf{R} that does the actual computing.  When commands are run in the script editor, they show up in the console, so the console is an important pane to always have in your \textsf{RStudio environment}.  

\subsubsection{The Environment Tab} 
The top right pane in Figure \ref{fig:rstudio} shows the \textsf{Environment} tab, which is the home of all stored information in \textsf{R}, such as datasets and variables.  The creation of any variables will show up here.  For example, upon running the following command in the script editor, a variable called \textit{x} should come up under \textsf{Values} in the \textsf{Environment} tab. The equals sign in the command below indicates that the variable of name \textsf{x} is taking on the numerical value 2. A variable created in this way is stored in \textsf{R} for later use and can later be called upon by referencing its variable name, \textit{x}.  Examples of this will be shown in Section \ref{}.  

<<>>=
x = 2
@


Furthermore, this pane can be used to import a dataset, and if successful, you should see the dataset show up in this global environment.  A dataset can be imported using the button \textit{Import Dataset} or from the script editor using the command \textit{load()} with the dataset name in quotation marks inside the parentheses.  For example, using a dataset that is on the local machine, the following will import the dataset into \textsf{R} for use and will show up in the \textsf{Environment} pane under \textsf{Data}, 

%% Wherever we upload the book online, we may want to post this dataset and hyperlink it here so people can see the example.  I think this is an important point for people to know how to upload their own datasets.  

<<>>=
load("samp_df.Rda")
@


At this point, the global environment looks something like that seen in Figure \ref{fig:rstudioenv}, showing both the variable \textit{x} and the dataset \textit{samp.df}.  
\begin{figure}[h!]
\centering
\includegraphics[width = 2in]{chapters/chapter_0/rstudioenv.png}
\caption{An example of how the global environment stores datasets and variables.}
\label{fig:rstudioenv}
\end{figure}


\subsubsection{The Files Tab}
In the lower right pane of Figure \ref{fig:rstudio}, several tabs can be seen.  The Files tab is a directory of all the files on the local computer and can be used to access other files, such as saved datasets or previously created \textsf{R} scripts.  

\subsubsection{The Plots Tab} 
The next tab seen is the Plots tab, which is where plots will be displayed when created in a R script file.  Section \ref{graphs} will go into more detail as to how to create plots, but just note that this is where they will show up.  

\subsubsection{The Packages Tab}
Because \textsf{R} is an open-source software, anyone can creates packages for it that contain functions, data, or other useful programs.  Packages are then shared and built upon to make the knowledge base of the community greater.  The Packages tab is where these packages are accessible in \textsf{RStudio}.  Many packages come standard with the installation of \textsf{RStudio} and can be seen here.  By checking the box to the left of a package, all of its contents will be available for use.  A package has been created to accompany this book, and it can be included for use in the packages tab.  Section \ref{thepackage} will discuss this specific package in further detail.  


\subsubsection{The Help Tab}
The Help Tab provides basic helpful information on most features of \textsf{R} and \textsf{RStudio}.  It can be searched, as well as accessed by typing a question mark next to any function or package in the script file.  For example, the following command will pull up in the Help tab all the information about the print function.  

<<>>=
?print
@


\subsubsection{The Viewer Tab}
%% What even is this tab?!?

\section{Working with Data in \textsf{R}} 

\subsection{Vectors} 
Vectors are one dimensional arrays used to store lists of information. They can be created using a concatenation function, \textit{c()}.  The values intended to be in the list are separated by commas inside the parentheses.  For example, a vector of numbers 1 through 5 can be made as follows.  Note that the first line assigns the variable \textit{num.vector} to the vector and the second line simply prints it out when called upon.  

<<>>=
num.vector = c(1,2,3,4,5)
num.vector
@

The same numerical vector can also be created using a colon, which implies the numbers between the end values.  For example, the following command creates the same vector as above, but without the concatenation command.  

<<>>=
num.vector2 = 1:5
num.vector2
@

Vectors can also be used for characters or strings, such as the following where the characters must be individually surrounded by quotation marks.  
<<>>=
alph.vector = c("a", "b", "c", "d", "e")
alph.vector
@

\subsubsection{Operating with Vectors}
Vectors can be used for computational purposes and many mathematical functions can be applied.  When two vectors of the same length are computed together, each element is paired with the corresponding element in the opposite list and the computation applied accordingly.  For example, addition, multiplication, and squaring are done pairwise as follows, 
<<>>=
a = c(1,2,3,4)
b = c(5,6,7,8)
a+b
a-b
a*b
a^2
@

Furthermore, a single numerical can be applied to a vector, acting as a vector itself of the same length as the corresponding vector. Therefore, multiplying a vector by 2 multiplies every element in the vector by 2.  Some examples of this can be seen here,  
<<>>=
2*a
2+a
@

Note that attempting to apply such mathematical operations to a vector of strings will not produce results.  An error like the following will appear, 
<<>>=
2*alph.vector
@

Another use of the concatenating function \textit{c()} is to combine multiple vectors into a single vector.  This is done as follows, 
<<>>=
c(a,b)
@

\subsubsection{Accessing Elements of a Vector}
Once a vector has been created, it is helpful to be able to pull out certain parts of it.  Vectors are indexed, meaning that each element in the vector corresponds to a location identified by number, numbered 1 through the length of the matrix.  To access an element in the vector, brackets must be used which signals to \textsf{R} that the element at the location specified within the brackets is wanted.  For example, to obtain the first element in the vector above \textit{b}, the correct command is \textit{b[1]}, as shown below 
<<>>=
b[1]
@

In order to obtain more than one element in a vector, the notation is more specific.  A vector of index locations must be passed into the brackets, such as in the following two examples, 
<<>>=
b[1:2]
b[c(1,3)]
@

If every element in a vector is wanted except for one or two, a negative sign can be applied to the vector contained inside the brackets.  For example, the following removes the second and third elements of the list \textit{b}.  
<<>>=
b[-c(2,3)]
@


\subsection{Matrices} 
A matrix is similar to a vector in that it stores information except that it is a two dimensional array.  The function \textit{matrix()} can be used to create two dimensional matrices.  The input of this function is the following 
\begin{itemize} 
\item A vector containing all the matrix entries
\item A specification of \textit{byrow = TRUE} which fills the matrix firstly left to right and top to bottom or a specification of \textit{byrow = FALSE} which fills columns first from left to right 
\item A specification of \textit{nrow = } which outlines how many rows are in the matrix
\end{itemize} 

To go through a basic example, 
<<>>=
mat1 = matrix(1:8, byrow = TRUE, nrow = 4)
mat1 
@

If you change the \textit{byrow} specification, you get the following 
<<>>=
mat2 = matrix(1:8, byrow = FALSE, nrow = 4)
mat2
@

Just like with vectors, mathematical computations can be applied to matrices.  Again, the computations are applied pairwase unless a single numerical value is applied which applies to all elements.  Some examples are as follows, 
<<>>=
mat1+mat2
mat1*mat2
2*mat1
@

Matrices can become significantly more complicated, and in such structures, form the basis for much statistical computation.  Consider the following table,

\begin{center} 
\begin{tabular}{|c c c c|}
\hline 
Name & Weight & Gender & Age \\ 
\hline 
John & 210 & Male & 22 \\ 
Suzie & 140 & Female & 45 \\ 
Mary & 120 & Female & 35 \\ 
Bob & 180 & Male & 50 \\ 
Dave & 160 & Male & 70 \\ 
\hline 
\end{tabular} 
\end{center}

There are two ways to create a matrix from this information: create a long list of values as used above or create several individual vectors and combine them into a matrix.  The second method is laid out here, 
<<>>=
names  = c("John", "Suzie", "Mary", "Bob", "Dave")
weights = c(210, 140, 120, 180, 160)
genders = c("Male", "Female", "Female", "Male", "Male")
ages = c(22, 45, 35, 50, 70)

samp.matrix = matrix(c(names, weights, genders, ages), nrow = 5)
samp.matrix
@
Notice how the \textit{c()} function is required to concatenate the several vectors into one long vector, as well as the specification of \textit{nrow()}, so as not to get a single long list of values.  


\subsubsection{Accessing Elements of a Matrix}
Because matrices are two dimensional, accessing elements inside them requires two dimensions.  As with vectors, bracket notation is used with a comma in the middle indicating the distinction between rows and columns.  Inside the brackets, the order is rows comma columns.  The best way to see this is through examples.  Using the \textit{samp.matrix} created just above, the item in the first row and first column can be pulled as follows, 
<<>>=
samp.matrix[1,1]
@

If instead, the entire first row was desired, this could be done by putting a vector of indeces wanted for the columns such as this 

<<>>=
samp.matrix[1,1:4]
@

Alternatively, if the column section after the comma is left blank, this signals to \textsf{R} that all columns are desired.  The result would be the same as above, 
<<>>=
samp.matrix[1,]
@




\subsection{Dataframes} 
Another method that \textsf{R} uses to store data is called a dataframe, which is similar to a matrix, with slight differences.  It is a two dimensional array, but row 

\subsubsection{Computing with Dataframes} 

\subsubsection{Accessing Elements of a Dataframe} 

\subsection{Datatypes}
\subsubsection{Numerical} 
\subsubsection{Categorical} 
% gender, true false, 0 or 1, 
% factor variables 
\subsubsection{Checking the Datatype}

\section{Functions} 

\section{Some Programming Background}

\section{The OIBioStat Package} \label{thepackage}
All the datasets used in the text can be accessed by downloading the OIBiostat package from \textsf{R}. Run the following command to download the package:
%' 
%' %% These commands aren't going to work until we have uploaded the package to CRAN. Just skip it for now and require below.
% <<eval = FALSE>>=
% install.packages("OIBioStat")  ## make sure to include the quotations
% @
%' 


Each time the package is needed, run the following command: 
%' 
<<warning = FALSE, message = FALSE>>=
require(OIBioStat)
@

To access a dataset in the package, simply run the \texttt{data()} command, which will load it into the \textsf{R} environment.  To see this has been done, it will pop up in the top right of \textsf{RStudio} in the pane labeled \textit{Environment} under \textit{Data}.  For example, a dataset called \texttt{swim} is in the package and can be loaded as follows, 
<<>>=
data(swim) 
@



\section{Exercises}