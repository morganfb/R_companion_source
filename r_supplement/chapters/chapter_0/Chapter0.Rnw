\pagestyle{fancy}

This text is a companion to \textit{Introductory Statistics for the Life and Biomedical Sciences}; while the main text focuses on a conceputal introduction to the use of statistics in the life sciences, this supplement provides an analytical and computational introduction using the statistical computing language \textsf{R}.  An understanding of the basics of \textsf{R}, how it stores, utilizes, and processes data, and how to analyze these results will be built.  

\section{What is \textsf{R}?}
\textsf{R} is an open-source statistical software that allows users to import, transform, and analyze data in order to draw conclusions.  In this case, it will be used to perform analyses of biomedical data, and this text will go through the steps to do so from installation to drawing conclusions.  

\subsection{Installation of \textsf{R}}
\textsf{R} is freely available on the internet, and it is recommended to download it from \url{http://cran.us.r-project.org/}, where there are up to date versions for Windows, Mac OS X, and Linux.  This link will provide instructions for a complete download.  

\subsection{Introduction to RStudio}
\textsf{RStudio} is a platform that makes using \textsf{R} significantly easier, providing a visual framework for working. It can be downloaded from \url{https://www.rstudio.com/products/rstudio/download/}, by scrolling to the bottom and selecting the appropriate operating system from \textit{Installers} under \textit{Installers for Supported Platforms}.  \textsf{RStudio} is not necessary in order to use \textsf{R}, but it is highly recommended for organizational and accesibility reasons.      


Upon opening \textsf{RStudio}, something similar to Figure \ref{fig:rstudio} should appear.  The four pane window environment is standard and provides easy access to many of the most commonly utilized tools.  Each corner contains one pane, and each pane can include several tabs.  The four panes shown in Figure \ref{fig:rstudio} demonstrate a common starting setup environment, but different versions of \textsf{Rstudio} may look a bit different.  Furthermore, panes can be moved around or closed.  Therefore, this section will go through the various panes, their elements and uses, and how to access them.    
\begin{figure}[h!]
\centering
\includegraphics[width = 6in]{chapters/chapter_0/rstudio.png}
\caption{The default \textsf{RStudio} layout.  }
\label{fig:rstudio}
\end{figure}

\subsubsection{The Script Editor}
The top left pane in Figure \ref{fig:rstudio} shows the script editor, used to edit a \textsf{R} script file.  Think of this pane as similar to any text editor, providing a working space for the code being utilized and a means to save that for later.  We recommend that all work is done in a \textsf{R} script file so no information is lost.  If a script editor is not visible, a new \textsf{R} script file can be created by going to \textit{File > New File > R Script}.  

In order to run a command in the script editor, you must place your curser on the line you want to run and type \textsf{command + Return} on Mac or \textsf{Ctrl + Enter} on Windows or Linux.  Alternatively, at the top of the script editor pane is the run button, which can be clicked after highlighting the code to be run.  Try this for yourself by opening a script file and running the following example.  If successful, you shall see the result of this simple calculation show up in the bottom left pane.  One of the most basic capabilties of \textsf{R} is as a calculator as shown in this example below.  The light grey box indicates a section of \textsf{R} code, where the purple text is code that has been inputted and the second line, as indicated by the hashtags and $[1]$ is output in response to the command in the first line.  

<<>>=
5+3 
@


\subsubsection{The Console} 
The bottom left pane in Figure \ref{fig:rstudio} is home to the console tab.  This is the machinery in \textsf{R} that does the actual computing.  When commands are run in the script editor, they and their output show up in the console, so the console is an important pane to always have in your \textsf{RStudio environment}.  If the console is not visible, it is likely minimized and can be reopened by going to \textit{View > Move Focus to Console}. 

\subsubsection{The Environment Tab} 
The top right pane in Figure \ref{fig:rstudio} hosts the \textsf{Environment} tab, which is the home of all stored information in \textsf{R}, such as datasets and variables.  The creation of any variables will show up here.  For example, upon running the following command in the script editor, a variable called \textit{x} should come up under \textsf{Values} in the \textsf{Environment} tab as shown in Figure \ref{fig:rstudioenv0}. The equals sign in the command below indicates that the variable of name \textsf{x} is taking on the numerical value 2. A variable created in this way is stored in \textsf{R} for later use and can later be called upon by referencing its variable name, \textit{x}.   

<<>>=
x = 2
@

 
\begin{figure}[h!]
\centering
\includegraphics[width = 2in]{chapters/chapter_0/rstudioenv0.png}
\caption{An example of how the global environment stores variables.}
\label{fig:rstudioenv0}
\end{figure}

To access a variable once created, the variable name can be called upon in the script editor and various operations can be performed to it.  For example, the below command uses the above created variable to get another result. More examples of this will be shown in Section \ref{}.  
<<>>=
x*2 
@


If the Environment tab is not visible, the upper right pane is likely minimized and can be reopened by going to \textit{View > Show Environment}.

\subsubsection{The Files Tab}
In the lower right pane of Figure \ref{fig:rstudio}, several tabs can be seen.  The Files tab is a directory of all the files on the local computer and can be used to access other files, such as saved datasets or previously created \textsf{R} scripts.  Navigating betweeen folders in this tab is similar to doing so on your computer.  This is where datsets with the file type \textit{Rdata} or \textit{Rda} can be loaded into the \textsf{R} environment.\footnote{A data file that is not in the format \textit{Rdata} must be imported rather than just loaded.  This can be done in the Environment tab using the button \textit{Import Dataset} or from the script editor using the command \textit{load()} with the dataset name in quotation marks inside the parentheses.  Insert reference here for an example of doing this}   Upon locating a dataset by navigating to its location on your computer, it can be loaded into the environment by clicking on it in this Files tab.  Doing this will cause the dataset to show up in the Environment tab in the same manner as described in the previous section.  For example, if the dataset called \textit{samp\_df.Rda} is loaded from the Files tab, the global environment should looks something like that seen in Figure \ref{fig:rstudioenv}, showing both the variable \textit{x} and the dataset \textit{samp.df}.   

\begin{figure}[h!]
\centering
\includegraphics[width = 2in]{chapters/chapter_0/rstudioenv.png}
\caption{An example of how the global environment stores datasets and variables.}
\label{fig:rstudioenv}
\end{figure}

If the Files tab is not visible, the lower right pane is likely minimized and can be reopened by going to \textit{View > Show Files}.


\subsubsection{The Plots Tab} 
The next tab seen is the Plots tab, which is where plots will be displayed when created in a R script file.  Section \ref{graphs} will go into more detail as to how to create plots, but just note that this is where they will show up.  

\subsubsection{The Packages Tab}
Because \textsf{R} is an open-source software, anyone can creates packages that contain functions, data, or other useful programs.  Packages are then shared and built upon to make the knowledge base of the community greater.  The Packages tab is where these packages are accessible in \textsf{RStudio}.  Many packages come standard with the installation of \textsf{RStudio} and can be seen here.  By checking the box to the left of a package, all of its contents will be available for use.  A package has been created to accompany this book, and it can be included for use in the packages tab.  Section \ref{thepackage} will discuss this specific package in further detail.  


\subsubsection{The Help Tab}
The Help Tab provides basic helpful information on most features of \textsf{R} and \textsf{RStudio}.  It can be searched, as well as accessed by typing a question mark next to any function or package in the script file.  For example, the following command will pull up in the Help tab all the information about the mean function.
<<>>=
?mean
@


\subsubsection{The Viewer Tab}
%% What even is this tab?!?

\section{Working with Data in \textsf{R}} 
\textsf{R} is built to work with many types of data, which can hold different pieces of information.  From large datasets to small lists of names, \textsf{R} is designed to handle data relative to its purpose and input form.  Several examples will be presented to illustrate many of these different means of handling data. %% I dont like the wording here... need to introduce the idea here better of why R has different datatypes 

\subsection{Datatypes}
\subsubsection{Numerical} 
\subsubsection{Categorical} 
% gender, true false, 0 or 1, 
% factor variables 
\subsubsection{Checking the Datatype}

\subsection{Vectors} 
Vectors are one dimensional arrays used to store lists of information. A few examples of a vector could be a grocery list, a list of ages of people in a room, or a guest list.  Vectors can be created using a concatenation function, \textit{c()}.  The values intended to be in the list are separated by commas inside the parentheses.  For example, a vector of numbers 1 through 5 can be made as follows.  Note that the first line shows this method of creating a list, while the second line assigns the variable \textit{num.vector} to be equal to the vector.  The third line calls on the variable just created and simply prints it.  

<<>>=
c(1,2,3,4,5)
num.vector = c(1,2,3,4,5)
num.vector
@

The same numerical vector can also be created using a colon, which implies the numbers between the end values.  For example, the following command creates the same vector as above, but without the concatenation command.  

<<>>=
num.vector2 = 1:5
num.vector2
@

Vectors can also be used for characters or strings, meaning a group of characters forming a word. The following is an example of a list of characters, where each of the characters must be individually surrounded by quotation marks in order to signal to \textsf{R} that it is a character and not a variable.  
<<>>=
alph.vector = c("a", "b", "c", "d", "e")
alph.vector
@

\subsubsection{Operating with Vectors}
Vectors can be used for computational purposes by applying many mathematical functions.  \textsf{R} applies computation to vectors pairwise, meaning that each element is paired with the corresponding element in the opposite vector and the computation applied accordingly. Note that vectors should be the same length in order to apply such computations. For example, addition, multiplication, and squaring are done pairwise as follows, 
<<>>=
a = c(1,2,3,4)
b = c(5,6,7,8)
a+b
a*b
a^2
@

Furthermore, a single numerical computation can be applied to a vector, by applying the single computation to each element in the vector.  For example, multiplying a vector by 2, as in the following example, individually multiplies every element in the vector by 2.
<<>>=
2*a
@

Note that attempting to apply such mathematical operations to a vector of strings will not produce results.  An error like the following will appear, 
<<>>=
2*alph.vector
@

Another use of the concatenating function \textit{c()} is to combine multiple vectors into a single vector.  This is done as follows, 
<<>>=
c(a,b)
@

It is reccomended that you try out these and other examples for yourself in order to fully appreciate how this works.

\subsubsection{Accessing Elements of a Vector} \label{access_vectors}
Once a vector has been created, it is helpful to be able to pull out certain parts of it.  Vectors are indexed, meaning that each element in the vector corresponds to a location identified by number, numbered 1 through the length of the matrix.  To access an element in the vector, brackets are used, which signals to \textsf{R} that the element at the location specified within the brackets is wanted.  For example, to obtain the first element in the vector above \textit{b}, the correct command is \textit{b[1]}, as shown below 
<<>>=
b[1]
@

In order to obtain more than one element in a vector, the notation is more specific.  A vector of index locations must be passed into the brackets, such as in the following two examples, 
<<>>=
b[1:3]
b[c(1,3)]
@

If every element in a vector is wanted except for one or two, a negative sign can be applied to the vector contained inside the brackets.  For example, the following removes the second and third elements of the list \textit{b}.  
<<>>=
b[-c(2,3)]
@


\subsection{Matrices} 
A matrix is similar to a vector in that it stores information except that it is a two dimensional array.  The function \textit{matrix()} can be used to create two dimensional matrices.  The input of this function is the following 
\begin{itemize} 
\item A vector containing all the matrix entries
\item A specification of \textit{byrow = TRUE} which fills the matrix firstly left to right and then top to bottom or a specification of \textit{byrow = FALSE} which fills columns top to bottom first moving from left to right 
\item A specification of \textit{nrow = } which outlines how many rows are in the matrix
\end{itemize} 

To go through a basic example, 
<<>>=
mat1 = matrix(1:8, byrow = TRUE, nrow = 4)
mat1 
@

If you change the \textit{byrow} specification, you get the following 
<<>>=
mat2 = matrix(1:8, byrow = FALSE, nrow = 4)
mat2
@

Just like with vectors, mathematical computations can be applied to matrices.  Again, the computations are applied pairwase unless a single numerical value is given which applies to all elements.  Some examples are as follows, 
<<>>=
mat1+mat2
mat1*mat2
2*mat1
@

Matrices can become significantly more complicated, and in such structures, form the basis for much statistical computation.  Consider the following table,

\begin{center} 
\begin{tabular}{|c c c c|}
\hline 
Name & Weight & Gender & Age \\ 
\hline 
John & 210 & Male & 22 \\ 
Suzie & 140 & Female & 45 \\ 
Mary & 120 & Female & 35 \\ 
Bob & 180 & Male & 50 \\ 
Dave & 160 & Male & 70 \\ 
\hline 
\end{tabular} 
\end{center}

There are two ways to create a matrix from this information: create a long list of values as used above or create several individual vectors and combine them into a matrix.  The second method is laid out here, 
<<>>=
names  = c("John", "Suzie", "Mary", "Bob", "Dave")
weights = c(210, 140, 120, 180, 160)
genders = c("Male", "Female", "Female", "Male", "Male")
ages = c(22, 45, 35, 50, 70)

samp.matrix = matrix(c(names, weights, genders, ages), byrow = FALSE, nrow = 5)
samp.matrix
@
Notice how the \textit{c()} function is required to concatenate the several vectors into one long vector, as well as the specification of \textit{nrow()}, so as not to get a single long list of values. Try this out for yourself, perhaps changing values for \textit{nrow} or \textit{byrow} to see how it changes the output.   

When this matrix was created, the variable names that helped to identify the purpose of each column were lost.  Therefore, it may be desirable to add column names to the matrix.  This can be done using the function \textit{colnames()}, which is applied to the variable that represents the matrix and takes in a list of strings as input.  The following example shows how this can be done.  
<<>>=
colnames(samp.matrix) = c("Name", "Weight", "Gender", "Age")
samp.matrix
@



\subsubsection{Accessing Elements of a Matrix}
Because matrices are two dimensional, accessing elements inside them requires two dimensions.  As with vectors, bracket notation is used with a comma in the middle indicating the distinction between rows and columns.  Inside the brackets, the order is rows comma columns.  The best way to see this is through examples.  Using the \textit{samp.matrix} created just above, the item in the first row and first column can be pulled as follows, 
<<>>=
samp.matrix[1,1]
@

If instead, the entire first row was desired, this could be done by putting a vector of indeces wanted for the columns such as this 

<<>>=
samp.matrix[1,1:4]
@

Alternatively, if the column section after the comma is left blank, this signals to \textsf{R} that all columns are desired.  The result would be the same as above, 
<<>>=
samp.matrix[1,]
@

\subsubsection{Combining Matrices}
Often times, it is useful to combine two matrices or a matrix and a vector into one larger matrix.  This can be done using the function \textit{cbind()} or \textit{rbind()}.  These work similarly to the concatenation function \textit{c()}, but with multiple dimensions.  \textit{cbind()} combines along the column dimension, while \textit{rbind()} does so along the rows.  The function takes as input the elements to be combined in the order of choice, separated by commas.  For example, in the example below, an extra column representing smoking status is added to the matrix.  
<<>>=
Smoker = c("Yes", "No", "Yes", "No", "No")
samp.matrix2 = cbind(samp.matrix, Smoker)
samp.matrix2
@


Similarly, an extra row could be added to the matrix representing another individual instead using \textit{rbind()} such as the following, 
<<>>=
samp.matrix3 = rbind(samp.matrix2, c("Lucy", 130, "Female", 18, "No"))
samp.matrix3
@


\subsection{Dataframes} 
Another method that \textsf{R} uses to store data is called a dataframe, which is similar to a matrix, with slight differences.  It is a two dimensional array just like a matrix, but the important difference is that it can handle more than a single data type.  Looking at the output of the matrix created above, it is noticable that every value has quotation marks on it in the output.  This indicates that \textsf{R} is viewing every value of that matrix as a character, even the numbers.  This is problematic in case computations on the numerical values were desired, such as calculating the mean weight of all individuals.  If you tried to do that, \textsf{R} would return an error.  Therefore, it is a better idea to store 2 dimensional data that is not a uniform datatype in a dataframe.    
<<>>=
samp.matrix
@

In order to create a dataframe in \textsf{R}, the function \textit{data.frame()} is used.  As input, it takes a list of vectors that are the desired columns in the dataframe.  For example, a dataframe that presents the same information as the matrix \textit{samp.matrix} can be created as follows, 
<<>>=
samp.df = data.frame(names, weights, genders, ages)
samp.df
@

Notice how none of the values have quotation marks on them anymore.  This begs two questions: whether the strings are still strings and whether the numerical values are now indeed numerical rather than strings.  There are two ways to determine this.  The easiest is to look in the Environment tab and to find the \textit{samp.df} element.  Clicking on the little blue triangle on the left will reveal something like the following image in Figure \ref{fig:dfcreate}.  Notice how under \textit{samp.df}, each column can be seen as an individual row, listed by its column name.  Next to the columns \textit{names} and \textit{genders} is the datatype "Factor", which is a desired string classification.  Furthermore, the columns \textit{weights} and \textit{ages} are indeed numerical.  

\begin{figure}[h!]
\centering
\includegraphics[width = 2in]{chapters/chapter_0/dfcreate.png}
\caption{An example of how the global environment displays important information about a dataframe.}
\label{fig:dfcreate}
\end{figure}


\subsubsection{Accessing Elements of a Dataframe} 
Accessing elements of a dataframe can be a bit trickier than with vectors or matrices.  As with matrices, two dimensional indeces can be used with brackets to access individual elements, rows, or columns.  For example, the first element and the first row can be retrieved respectively as follows, 

<<>>=
samp.df[1,1]
samp.df[1,]
@

Note that if you put a one dimensional list inside the brackets, \textsf{R} will default to pulling the column with that index.  For example, the following pulls the first column.  
<<>>=
samp.df[1]
@

It must be noted that dataframes maintain column vector names upon creation, and this is an important thing to know when trying to access elements.  With dataframes, the notation \textit{dataframe\$variable\_name} can be used to access an entire column, where the dollar sign signifies that you are looking for the column with that variable name that follows.  For example, the following returns the \textit{weights} column of the dataframe.  
<<>>=
samp.df$weights
@

This command returns a vector of the weights, and as discussed in Section \ref{access_vectors}, a specific item in that vector can be accessed using a one dimensional vector inside the brackets.  For example, the following returns the first element in the column \textit{weights}.  
<<>>=
samp.df$weights[1]
@

\subsubsection{Altering Dataframes}

When working with dataframes, it is often reccomended that you create a new column if you want to alter the data in some form.  For example, if you wanted to convert the weights given to kg, you could add another column to the dataframe to do so.  In order to add a new column, you simply call \textit{dataframe\$new\_variable\_name} and set it equal to something in the same way that you define a variable.  For example, the following command adds this new column of weights in kilograms.  
<<>>=
samp.df$weights_kg = samp.df$weights/2.2
samp.df
@

The functions \textit{cbind()} and \textit{rbind()} can be applied in the same way to dataframes as matrices.  It is reccomended that you try this out for yourself.  


\section{Functions} 

\section{Some Programming Background}

\section{The OIBioStat Package} \label{thepackage}
All the datasets used in the text can be accessed by downloading the OIBiostat package from \textsf{R}. Run the following command to download the package:
%' 
%' %% These commands aren't going to work until we have uploaded the package to CRAN. Just skip it for now and require below.
% <<eval = FALSE>>=
% install.packages("OIBioStat")  ## make sure to include the quotations
% @
%' 


Each time the package is needed, run the following command: 
%' 
<<warning = FALSE, message = FALSE>>=
require(OIBioStat)
@

To access a dataset in the package, simply run the \texttt{data()} command, which will load it into the \textsf{R} environment.  To see this has been done, it will pop up in the top right of \textsf{RStudio} in the pane labeled \textit{Environment} under \textit{Data}.  For example, a dataset called \texttt{swim} is in the package and can be loaded as follows, 
<<>>=
data(swim) 
@



\section{Exercises}